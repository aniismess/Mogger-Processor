# Mogger Processor Documentation

## Overview

Mogger Processor is a lightweight simulation of an operating system that allows users to manage processes and files. It provides a command-line interface where users can create, list, start, and stop processes, as well as manage files.

## Table of Contents

1. Features
2. Data Structures
3. Functions
4. Command List
5. Usage
6. Compilation and Execution

---

## Features

- **Process Management:**
  - Create, start, stop, and list processes.
  - Set process priorities and memory usage.
  
- **File Management:**
  - Create and list files with specified sizes.
  
- **System Information:**
  - Display current system status, including memory usage and process count.

- **Interactive Command Line:**
  - User-friendly command interpreter with color-coded messages for better visibility.

---

## Data Structures

### Process

This structure represents a process in the operating system.

```c
typedef struct {
    int id;                  // Unique identifier for the process
    char name[50];          // Name of the process
    int status;             // Process status (0: stopped, 1: running)
    int priority;           // Process priority level
    int memory_usage;       // Memory usage in MB
    time_t creation_time;   // Creation time of the process
} Process;
```

### File

This structure represents a file in the operating system.

```c
typedef struct {
    char name[50];          // Name of the file
    int size;              // Size of the file in KB
} File;
```

### Global Variables

- `Process processes[MAX_PROCESSES];` - Array to store active processes.
- `int process_count;` - Current number of processes.
- `int total_memory_used;` - Total memory currently used by processes.
- `File files[MAX_FILES];` - Array to store files.
- `int file_count;` - Current number of files.

---

## Functions

### void print_colored(const char* text, const char* color)

Prints the given text in the specified color.

### void print_welcome_message()

Displays the welcome message for Mogger Processor.

### void init_os()

Initializes the OS, displaying the welcome message and setting up the random seed.

### void create_process(const char* name, int priority, int memory)

Creates a new process with the specified name, priority, and memory usage.

### void list_processes()

Lists all currently active processes with their details.

### void start_process(int id)

Starts a specified process by its ID.

### void stop_process(int id)

Stops a specified process by its ID.

### void create_file(const char* name, int size)

Creates a new file with the specified name and size.

### void list_files()

Lists all files currently created along with their sizes.

### void display_system_info()

Displays the current system information, including OS version and resource usage.

### void command_interpreter()

Main loop that interprets user commands and interacts with the OS.

### int main()

The entry point of the program that initializes the OS and starts the command interpreter.

---

## Command List

| Command                          | Description                                                  |
|----------------------------------|--------------------------------------------------------------|
| `create [name] [priority] [memory]` | Create a new process with specified name, priority, and memory usage. |
| `list`                           | List all active processes.                                  |
| `start [id]`                    | Start a process by its ID.                                  |
| `stop [id]`                     | Stop a process by its ID.                                   |
| `createfile [name] [size]`     | Create a new file with specified name and size.            |
| `listfiles`                     | List all created files.                                     |
| `sysinfo`                       | Display current system information.                          |
| `help`                          | Show available commands.                                    |
| `exit`                          | Exit the Mogger Processor.                                  |

---

## Usage

1. Compile the program using a C compiler.
2. Run the executable to start the Mogger Processor.
3. Use the command line to enter commands and manage processes and files.

---

## Compilation and Execution

To compile the program, use the following command in your terminal:

```bash
gcc -o MoggerProcessor MoggerProcessor.c -std=c99
```

To execute the program, run:

```bash
./MoggerProcessor
```

Ensure that your terminal supports ANSI escape codes for color output.

---
